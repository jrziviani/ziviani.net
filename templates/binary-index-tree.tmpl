{% extends "base.tmpl"  %}
{% block postbody %}
<h2>Binary Index Tree</h2>

<p>As per <a href="https://en.wikipedia.org/wiki/Fenwick_tree" target="_blank">wikipedia</a>, A Fenwick tree or binary indexed tree is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers. This structure was proposed by Peter Fenwick in 1994 to improve the efficiency of arithmetic coding compression algorithms.</p>

<p>I took a time to understand how it works but, at the end, it's not as hard as it looks.</p>

<p>Imagine the following array:</p>

<p>
<table class="table table-striped">
    <thead>
        <tr>
            <th>index</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
            <th>13</th>
            <th>14</th>
            <th>15</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>cumul.freq.</td>
            <td>0</td>
            <td>13</td>
            <td>21</td>
            <td>16</td>
            <td>45</td>
            <td>18</td>
            <td>67</td>
            <td>34</td>
            <td>184</td>
            <td>39</td>
            <td>74</td>
            <td>29</td>
            <td>108</td>
            <td>47</td>
            <td>95</td>
            <td>3</td>
        </tr>
    </tbody>
</table>

<table class="table table-striped">
    <thead>
        <tr>
            <th>index</th>
            <th>16</th>
            <th>17</th>
            <th>18</th>
            <th>19</th>
            <th>20</th>
            <th>21</th>
            <th>22</th>
            <th>23</th>
            <th>24</th>
            <th>25</th>
            <th>26</th>
            <th>27</th>
            <th>28</th>
            <th>29</th>
            <th>30</th>
            <th>31</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>cumul.freq.</td>
            <td>440</td>
            <td>48</td>
            <td>87</td>
            <td>1</td>
            <td>131</td>
            <td>37</td>
            <td>71</td>
            <td>25</td>
            <td>235</td>
            <td>36</td>
            <td>67</td>
            <td>9</td>
            <td>106</td>
            <td>33</td>
            <td>48</td>
            <td>17</td>
        </tr>
    </tbody>
</table>
</p>

<p>Suppose I want to add <strong>50</strong> to the item at index <strong>17</strong>, I'll do it by using this code:</p>

<pre class="prettyprint linenums"><code class="language-c++">void update(auto &amp;v, size_t index, int value)
{
    while (index &lt; v.size()) {
        v[index] += value;
        index += (index &amp; -index);
    }
}

// caller
update(array, 17, 50);</code></pre>

<p><img src="/ui/images/bit_debug.png" alt="binary index tree update value"/></p>

<p>
<table class="table table-striped">
    <thead>
        <tr>
            <th>index</th>
            <th>0</th>
            <th>1</th>
            <th>2</th>
            <th>3</th>
            <th>4</th>
            <th>5</th>
            <th>6</th>
            <th>7</th>
            <th>8</th>
            <th>9</th>
            <th>10</th>
            <th>11</th>
            <th>12</th>
            <th>13</th>
            <th>14</th>
            <th>15</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>cumul.freq.</td>
            <td>0</td>
            <td>13</td>
            <td>21</td>
            <td>16</td>
            <td>45</td>
            <td>18</td>
            <td>67</td>
            <td>34</td>
            <td>184</td>
            <td>39</td>
            <td>74</td>
            <td>29</td>
            <td>108</td>
            <td>47</td>
            <td>95</td>
            <td>3</td>
        </tr>
    </tbody>
</table>
<table class="table table-striped">
    <thead>
        <tr>
            <th>index</th>
            <th>16</th>
            <th class="yellow">17</th>
            <th class="yellow">18</th>
            <th>19</th>
            <th class="yellow">20</th>
            <th>21</th>
            <th>22</th>
            <th>23</th>
            <th class="yellow">24</th>
            <th>25</th>
            <th>26</th>
            <th>27</th>
            <th>28</th>
            <th>29</th>
            <th>30</th>
            <th>31</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>cumul.freq.</td>
            <td>440</td>
            <td class="yellow">98</td>
            <td class="yellow">137</td>
            <td>1</td>
            <td class="yellow">181</td>
            <td>37</td>
            <td>71</td>
            <td>25</td>
            <td class="yellow">285</td>
            <td>36</td>
            <td>67</td>
            <td>9</td>
            <td>106</td>
            <td>33</td>
            <td>48</td>
            <td>17</td>
        </tr>
    </tbody>
</table>
</p>

<p>Now, I'm going to read the sum of frequencies:</p>

<pre class="prettyprint linenums"><code class="language-c++">int read(const auto &amp;v, size_t index)
{
    if (index &gt;= v.size())
        throw exception();

    int s = 0;
    while (index) {
        s += v[index];
        index -= (index &amp; -index);
    }
    return s;
}

// caller
read(array, 31);</code></pre>

<pre class="prettyprint linenums"><code class="language-bash">$ ./bit
896</code></pre>

<p><img src="/ui/images/bit_debug2.png" alt="binary index tree read value"/></p>

<h3>Isolating the rightmost bit</h3>

<p>The code <strong>index &amp; -index</strong> is a very interesting hack that uses <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank">two's complement</a> systems to isolate the rightmost bit. In two's complement, to have the negative number you need to invert all bits of the positive number plus 1.</p>

<p>For instance, <strong>decimal 50</strong> is <strong>binary 110010</strong>, <strong>decimal -50</strong> is <strong>001101 + 1 = 001110</strong>. Then, if you perform an <strong>AND</strong> operation between both will get the last 1 with all rightmost zeroes.</p>

<p>If you print <strong>i &amp; -i</strong> in a sequence of i, you will get the following pattern:</p>

<pre class="prettyprint linenums"><code class="language-python">for i in range(33):
    print i &amp; -i,
...
0 1 2 1 4 1 2 1 8 1 2 1 4 1 2 1 16 1 2 1 4 1 2 1 8 1 2 1 4 1 2 1 32</code></pre>

<p>And <a href="https://en.wikipedia.org/wiki/Fenwick_tree" target="_blank">Mr. Fenwick</a> had the idea to make a logarithmic algorithm to access a data structure out of such pattern. <strong>!!BRILLIANT!!</strong>

<p>There are much more about it and how/when to use binary index trees but it's beyond of the scope and I know a <a target="_blank" href="http://community.topcoder.com/tc?module=Static&d1=tutorials&d2=binaryIndexedTrees">place</a> that will take it further more appropriately.</p>

<h3>References</h3>

<ul>
    <li><a target="_blank" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.8917">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.14.8917</a></li>
    <li><a target="_blank" href="http://community.topcoder.com/tc?module=Static&d1=tutorials&d2=binaryIndexedTrees">http://community.topcoder.com/tc?module=Static&d1=tutorials&d2=binaryIndexedTrees</a></li>
    <li><a target="_blank" href="https://cs.stackexchange.com/questions/10538/bit-what-is-the-intuition-behind-a-binary-indexed-tree-and-how-was-it-thought-a">https://cs.stackexchange.com/questions/10538/bit-what-is-the-intuition-behind-a-binary-indexed-tree-and-how-was-it-thought-a</a></li>
    <li><a target="_blank" href="http://www.hackersdelight.org">http://www.hackersdelight.org</a>
</ul>

{% include "disqus.tmpl" %}
{% endblock %}
