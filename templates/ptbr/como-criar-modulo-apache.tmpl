{% extends "ptbr/base.tmpl" %}
{% block postbody %}
<h2>Como criar um módulo para Apache</h2>

<p class="well"><strong>Nota</strong>: Eu escrevi este artigo anos atrás e em Inglês. A versão original pode ser acessada <a href="https://ziviani.net/2011/how-to-create-an-apache-module" target="_blank">aqui</a>. O código também é o mesmo, que pode ser obtido <a href="https://github.com/jrziviani/apache_module" target="_blank">aqui</a>.</p>

<p>Você pode estar interessado em escrever seu próprio módulo para Apache HTTPd por vários motivos:
<ul>
    <li>entender como o webserver funciona</li>
    <li>entender especificamente o Apache HTTPd</li>
    <li>melhorar a performance em alguma parte do seu sistema web</li>
    <li>instrumentação</li>
    <li>diversão? por que não?</li>
</ul>
</p>

<h3>Aquecimento</h3>

<p>O primeiro passo é baixar o código e compilá-lo:</p>

<pre class="prettyprint linenums"><code class="language-bash">$ git clone https://github.com/apache/httpd.git
$ cd httpd
$ git clone https://github.com/apache/apr.git srclib/apr
$ ./buildconf
$ mkdir mybuild
$ cd mybuild
$ CFLAGS="-O0 -ggdb" ../configure --enable-rewrite --enable-so --prefix=/home/ziviani/www
$ make -j 5
$ make install
$ cd /home/ziviani/www
$ ls
bin  build  cgi-bin  conf  error  htdocs  icons  include  lib  logs  man  manual  modules</code></pre>

<p>Veja se o seu <em>build</em> funcionou. Ajuste a porta local para acessá-lo e aponte seu <em>browser</em> para o servidor. <strong>Nota:</strong> coloquei uma porta alta para não precisar iniciar o servidor como administrador.</p>

<pre class="prettyprint linenums"><code class="language-bash">$ # ainda em /home/ziviani/www
$ vi conf/httpd.conf
...
LISTEN 9898
...
ServerName localhost:9898
...

$ bin/apachectl -k start</code></pre>

<p><img src="/ui/images/apache_works1.png" alt="apache initial works page" /></p>

<pre class="prettyprint"><code class="language-bash">$ bin/apachectl -k stop</code></pre>

<h3>Nosso Módulo</h3>

<p>Beleza! Agora que temos um servidor funcionando vamos criar nosso primeiro módulo.</p>

<pre class="prettyprint linenums"><code class="language-bash">$ bin/apxs -g -n my_fast_server
Creating [DIR]  my_fast_server
Creating [FILE] my_fast_server/Makefile
Creating [FILE] my_fast_server/modules.mk
Creating [FILE] my_fast_server/mod_my_fast_server.c
Creating [FILE] my_fast_server/.deps

$ vim my_fast_server/mod_my_fast_server.c</code></pre>

<p>Fácil, hein? <code class="prettyprint">apxs</code> criou um template pra gente (graças à opção -g) e só nos resta preencher o <em>template</em> com nosso código e pronto! Note que os fontes gerados pelo apxs vem comentado, explicando exatamente o que precisa ser feito</p>

<pre class="prettyprint linenums"><code class="language-c">/* 
**  mod_my_fast_server.c -- Apache sample my_fast_server module
**  [Autogenerated via ``apxs -n my_fast_server -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_my_fast_server.c
**
**  Then activate it in Apache's httpd.conf file for instance
**  for the URL /my_fast_server in as follows:
**
**    #   httpd.conf
**    LoadModule my_fast_server_module modules/mod_my_fast_server.so
**    &lt;Location /my_fast_server&gt;
**    SetHandler my_fast_server
**    &lt;/Location&gt;
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /my_fast_server and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/my_fast_server 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_my_fast_server.c
*/ 

#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

/* meu simples content handler */
static int my_fast_server_handler(request_rec *r)
{
    if (strcmp(r-&gt;handler, "my_fast_server")) {
        return DECLINED;
    }
    r-&gt;content_type = "text/html";

    if (!r-&gt;header_only)
        ap_rputs("The sample page from mod_my_fast_server.c\n", r);
    return OK;
}

static void my_fast_server_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(my_fast_server_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA my_fast_server_module = {
    STANDARD20_MODULE_STUFF, 
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    my_fast_server_register_hooks  /* register hooks              */
};</code></pre>

<p>Só pra adicionar um molhinho a mais eu fiz algumas mudanças extras em <code class="prettyprint">mod_my_fast_server.c</code>. Nada especial, apenas manda o <em>browser</em> imprimir seja o lá o que se tenha sido passado na <em>string query</em>.</p>

<pre class="prettyprint linenums"><code class="language-c">#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

#define MAX_HANDLER 4

typedef int (*method_handler)(request_rec *r);

// HTTP Get method handler
static int get_handler(request_rec *r);

// HTTP Post method handler
static int post_handler(request_rec *r);

// HTTP Put method handler
static int put_handler(request_rec *r);

// HTTP Delete method handler
static int delete_handler(request_rec *r);

/* The sample content handler */
static int my_fast_server_handler(request_rec *r)
{
    if (strcmp(r-&gt;handler, "my_fast_server")) {
        return DECLINED;
    }
    r-&gt;content_type = "text/html";      

    // baseado em httpd.h, r-&gt;method_number nos dá a representação numérica
    // do método http: 0 - get, 1 - put, 2 - post, 3 - delete, etc.
    method_handler methods[MAX_HANDLER] = {&amp;get_handler, &amp;put_handler,
        &amp;post_handler, &amp;delete_handler};

    if (r-&gt;method_number &gt;= MAX_HANDLER || r-&gt;method_number &lt; 0) {
        return DECLINED;
    }

    // chama função respectiva
    return methods[r-&gt;method_number](r);
}

static int get_handler(request_rec *r)
{
    apr_status_t rv;
    int i = 0;
    int n = 0;
    char* query = r-&gt;args; // query string

    // mime type vai no pacote de resposta
    r-&gt;content_type = "text/html";

    // se o o request foi apenas pelo cabeçalho - ou - o query string
    // estava vazio, retorne apenas OK
    if (r-&gt;header_only || r-&gt;args == 0) {
        return OK;
    }

    ap_rprintf(r, "&lt;h1&gt;[GET] Your query string: %s&lt;/h1&gt;", query);

    return OK;
}

// Post http handler
static int post_handler(request_rec *r)
{
    return OK;
}

// Put http handler
static int put_handler(request_rec *r)
{
    return OK;
}

// Delete http handler
static int delete_handler(request_rec *r)
{
    return OK;
}

static void my_fast_server_register_hooks(apr_pool_t *p)
{
    ap_hook_handler(my_fast_server_handler, NULL, NULL, APR_HOOK_MIDDLE);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA my_fast_server_module = {
    STANDARD20_MODULE_STUFF, 
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    NULL,                  /* table of config file commands       */
    my_fast_server_register_hooks  /* register hooks              */
};</code></pre>

<p>Agora vamos construir o DSO e instalar o DSO no diretório de módulos do Apache (que o apxs faz pra gente também - automaticamente).

<pre class="prettyprint linenums"><code class="language-bash">$ bin/apxs -c -i my_fast_server/mod_my_fast_server.c

/home/ziviani/www/build/libtool --silent --mode=compile gcc ...
...
----------------------------------------------------------------------
Libraries have been installed in:
   /home/ziviani/www/modules

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the '-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the 'LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the 'LD_RUN_PATH' environment variable
     during linking
   - use the '-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to '/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
chmod 755 /home/ziviani/www/modules/mod_my_fast_server.so</code></pre>

<p>E isso é tudo!! Basta configurar o <code class="prettyprint">httpd.conf</code> e sair usando seu novo servidor.</p>

<pre class="prettyprint linenums"><code class="language-bash">$ vim conf/httpd.conf
...
LoadModule my_fast_server_module modules/mod_my_fast_server.so
&lt;Location /my_fast_server&gt;
    SetHandler my_fast_server
&lt;/Location&gt;
...

$ bin/apachectl -k start</code></pre>

<p>Abra seu <em>browser</em>, navegue para http://localhost:9898/my_fast_server?test&query=bla e você verá sua <em>query string</em> impressa na tela.</p>

<p><img src="/ui/images/apache_works2.png" alt="apache initial works page" /></p>

<h3>Extra: static (sem apxs) build</h3>

<p>Imagine que você não queira usar apxs e queira construir seu módulo junto ao httpd (built-in). Eu li em algum lugar que este método pode chegar a ser 20% mais rápido na inicialização e até 5% mais rápido em execução, mas carece de fontes.</p>

<p>Para isso, vou reusar o mesmo fonte a adicioná-lo ao <em>build system</em> do Apache.</p>
<ul>
    <li>copie a pasta my_fast_server para a pasta principal de fontes do servidor</li>
    <li>adicione my_fast_server ao build system;</li>
    <li>chame buildconf para re-generar o autoconf;</li>
    <li>build it!</li>
</ul></p>

<pre class="prettyprint linenums"><code class="language-bash">$ cp -a my_fast_server ~/httpd/modules/
$ cd ~/httpd

$ vim my_fast_server/config.m4

APACHE_MODPATH_INIT(my_fast_server)
APACHE_MODULE(my_fast_server, My FAST server!, , , no)
APACHE_MODPATH_FINISH

$ vim my_fast_server/Makefile.in

include $(top_srcdir)/build/special.mk

$ ./buildconf

$ cd mybuild
$ ../configure --help
...
  --disable-version       determining httpd version in config files
  --enable-remoteip       translate header contents to an apparent client
                          remote_ip
  --enable-my-fast-server My FAST!! server  &lt;===== Yay!!!
  --enable-proxy          Apache proxy module
  --enable-proxy-connect  Apache proxy CONNECT module. Requires
...

$ CFLAGS="-O0 -ggdb" ../configure --enable-rewrite --enable-so --enable-my-fast-server --prefix=/home/ziviani/www
$ make
$ make install</code></pre>

<p>Se seu <em>build</em> terminou sem erros você já pode testá-lo. Edite o <code class="prettyprint">conf/httpd.conf</code> na pasta www e inicie o servidor.</p>

<pre class="prettyprint linenums"><code class="language-bash">$ vim conf/httpd.conf
...
LoadModule my_fast_server_module modules/mod_my_fast_server.so
&lt;Location /my_fast_server&gt;
    SetHandler my_fast_server
&lt;/Location&gt;
...

$ bin/apachectl -k start</code></pre>

<p>Abra o <em>browser</em> e navegue para http://localhost:9898/my_fast_server?test&query=bla. Deve estar funcionando.</p>

<p><img src="/ui/images/apache_works2.png" alt="apache initial works page" /></p>

<p>Espero que seja útil :-)</p>

<h3>References</h3>
<p><ul>
    <li><a href="http://apr.apache.org/docs/apr/1.4/modules.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://apr.apache.org']);">http://apr.apache.org/docs/apr/1.4/modules.html</a></li>
    <li><a href="http://httpd.apache.org/docs/2.1/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://httpd.apache.org']);">http://httpd.apache.org/docs/2.1/</a></li>
    <li><a href="http://httpd.apache.org/docs/2.1/mod/mod_dbd.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://httpd.apache.org']);">http://httpd.apache.org/docs/2.1/mod/mod_dbd.html</a></li>
    <li><a href="http://blog.projectfondue.com/2009/8/25/apache-moving-from-prefork-to-worker" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://blog.projectfondue.com']);">http://blog.projectfondue.com/2009/8/25/apache-moving-from-prefork-to-worker</a></li>
</ul></p>

{% include "disqus.tmpl" %}

{% endblock %}

